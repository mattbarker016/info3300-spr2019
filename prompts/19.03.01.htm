<html><head>
<title>INFO 3300 - March 1</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <style>

  .state {
    fill: lightgrey;
    stroke: none;
  }

  .outline {
    stroke: black;
    stroke-width: 1px;
    fill: none;
  }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for March 1</h3>
  <p> Take this <a href="https://tinyurl.com/3300states">survey</a> to generate data for today's class.</p>
  <p>
    We have a new import at the top of the file: <a href="https://github.com/topojson/topojson">TopoJSON</a><br/>
    TopoJSON provides a helpful framework for storing, loading, and displaying topographical data. Check out its <a href="https://github.com/topojson/topojson-specification">data specification</a>.
  </p>
  <p>
    More on <a href="https://github.com/d3/d3-geo">d3.geo</a> and its <a href="https://github.com/d3/d3-geo#azimuthal-projections">geographic projections</a>.
  </p>

  <h5>HTML for today:</h5>


  <svg id="choropleth" height="400" width="600" style="background: #445; margin-top:50px" >

  </svg>

  <svg id="colorLegend" height="100" width="600" style="background: #fff; margin-top:30px" >

  </svg>


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">

  const svg = d3.select("#choropleth");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = { top: 20, right: 20, bottom: 20, left:20};
  const mapWidth = width - margin.left - margin.right;
  const mapHeight = height - margin.top - margin.bottom;
  const map = svg.append("g")
                  .attr("transform","translate("+margin.left+","+margin.top+")");

  // 1. Let's explore a new way to use promises for data imports that might be a bit cleaner when importing lots of files



    // 2. Draw a map of US using topoJSON
    // 2a. Import data as synchronous call to topoJSON data file
    // Care of Mike Bostock:
    //   "../datasets/us.json"
    //   "../datasets/us-state-names.tsv"



    // 2b. Pick out topographic features and build d3 helpers



    // 2c. Draw states and outlines



    // 3a. Import survey data as synchronous calls
    // "../datasets/state_survey_options.csv"
    // "../datasets/US States & Territories (Responses) - Form Responses 1.csv"




    // 3b. Generate the counts we will need



    // 3c. Make a d3 color scale for frequency, first using d3.interpolateGnBu
    // ["#fff","#f6fbfc","#adc2da","#8879b3","#762b80"]
    // ["#f6fbfc","#adc2da","#8879b3","#762b80"]


    // 3d. Recolor the states to make a choropleth





    // // Bonus code here to draw an adaptive gradient legend so we can see different color scales for choropleth maps
    // //  Credit Prof. Rz if you are basing a legend on this structure, and note performance issues
    // const legend = d3.select("#colorLegend");
    // const legendWidth = legend.attr("width");
    // const legendHeight = legend.attr("height");
    // const barHeight = 60;
    // const stepSize = 4; // warning, not using a canvas element so lots of rect tags will be created for low stepSize, causing issues with performance
    // // Use minMax from step 3c, but extend range by 1 in either direction to expose more features
    // const pixelScale = d3.scaleLinear().domain([0,legendWidth-40]).range([minMax[0]-1,minMax[1]+1]); // In this case the "data" are pixels, and we get numbers to use in colorScale
    // const barScale = d3.scaleLinear().domain([minMax[0]-1,minMax[1]+1]).range([0,legendWidth-40]);
    // const barAxis = d3.axisBottom(barScale);
    // legend.append("g")
    //   .attr("class", "colorbar axis")
    //   .attr("transform","translate("+(20)+","+(barHeight+5)+")")
    //   .call(barAxis);
    // // Draw rects of color down the bar
    // let bar = legend.append("g").attr("transform","translate("+(20)+","+(0)+")")
    // for (let i=0; i<legendWidth-40; i=i+stepSize) {
    //   bar.append("rect")
    //     .attr("x", i)
    //     .attr("y", 0)
    //     .attr("width", stepSize)
    //     .attr("height",barHeight)
    //     .style("fill", colorScale( pixelScale(i) )); // pixels => countData => color
    // }
    // // Put lines in to mark actual min and max of our data
    // bar.append("line").attr("stroke","white").attr("stroke-width",3).attr("x1", barScale(minMax[0])).attr("x2", barScale(minMax[0])).attr("y1", 0).attr("y1", barHeight+4);
    // bar.append("line").attr("stroke","white").attr("stroke-width",3).attr("x1", barScale(minMax[1])).attr("x2", barScale(minMax[1])).attr("y1", 0).attr("y1", barHeight+4);






  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
