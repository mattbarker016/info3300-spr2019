<html><head>
<title>INFO 3300 - February 20</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
    .legend span {
      margin-right: 10px;
    }
    #joindemo circle {
      stroke-width: 2;
      stroke: #aaa;
      fill: #fff;
    }
    #joindemo text {
      fill: #fff;
      text-anchor: middle;
      alignment-baseline: middle;
      font-size: 20px;
      font-weight: bold;
    }
    #scatterplot text {
      text-anchor: middle;
      alignment-baseline: middle;
    }


    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

    #linechart .line {
      stroke: steelblue;
      fill: none;
    }


  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for February 20</h3>
  <p>
    Homeworks 1 and 2 have been returned. If you would like to pursue a regrade (which may increase or reduce your HW grade), you have until Friday to request one by email to me.
  </p>
  <p>
    Mike Bostock has a <a href="https://bl.ocks.org/mbostock/3019563">handy page discussing chart margins</a>.
  </p>
  <p>
    Learn more about <a href="https://github.com/d3/d3-shape#curveLinear">d3 line smoothing choices</a>. <a href="https://bl.ocks.org/d3noob/ced1b9b18bd8192d2c898884033b5529">Here</a> is a helpful block.
  </p>
  <p>
    <a href="http://bl.ocks.org/zanarmstrong/05c1e95bf7aa16c4768e">This blocks demo</a> might be helpful for generating new tick formattings.
  </p>

  <h5>HTML for today:</h5>


  <svg id="scatterplot" height="400" width="600" style="background: #fff; margin-top:50px" >

  </svg>
  <div id="simpleLegend" class="legend"> </div>
  <br/>
  <svg id="joindemo" height="120" width="500" style="background: #27716e; margin-top:50px" >

  </svg>
  <p id="printout" style="margin-top:10px">(Dataset will appear here)</p>
  <button id="join1">[1,2,3,4,5]</button>
  <button id="join2">[1,2,3,4,5,6,7,8]</button>
  <button id="join3">[    3,  5,  7,8,9,10]</button>
  <br/>
  <svg id="linechart" height="300" width="600" style="background: #eee; margin-top:50px" >

  </svg>



  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today, part 1:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>
  <h5>Code for today, part 2:</h5>
  <pre>
    <code id="display2" class="hljs javascript">
    </code>
  </pre>
  <h5>Code for today, part 3:</h5>
  <pre>
    <code id="display3" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">


    // Let's make a plain old scatterplot -- we are going to re-visit a few things from Friday


    // 0. Find our SVG and get that ready
    //     We're going to use a new way of padding that makes axes easier
    let svg = d3.select("svg#scatterplot");
    let width = svg.attr("width");
    let height = svg.attr("height");
    // This is a clever way to do padding that is more adjustable when you are designing
    let margin = { top: 10, right: 10, bottom: 50, left: 50};
    let chartWidth = width - margin.left - margin.right; // If you know the key is fixed text, you can access it with . instead of [""]
    let chartHeight = height - margin.top - margin.bottom;

    // 1. Import some CSV data
    d3.csv("../datasets/gapminder.csv").then( function(data) {

      // Useful fields:  "Life Expectancy"  "GDP/Person (PPP$)"   "Total Population"

      // 2. Check for data issues

      // What we find here are that most of the attributes are imported as strings rather than numbers. Let's cast them.
      data.forEach( (d, i) => {
        d['life'] =  Number(d["Life Expectancy"])  ;
        d['gdp'] =  Number(d["GDP/Person (PPP$)"])   ;
        d['pop'] =  Number(d["Total Population"].replace(/,/g,""))   ;
      });

      // We noticed that the chart seemed very crunched at the top
      //  Looking at the data, we found points with 0 values in gdp and life
      //  (This is probably because they were NA or blank and the Number() cast them to 0
      data = data.filter( d => d['gdp'] != 0 && d['life'] != 0 );

      console.log(data);

      // 3. Let's build some scales
      const gdpMin = d3.min(data, d => d['gdp']);
      const gdpMax = d3.max(data, d => d['gdp']);
      const gdpScale = d3.scaleLog()
              .domain([gdpMin+1, gdpMax+1])
              .range([0, chartWidth]); // x axis

      const lifeMin = d3.min(data, d => d['life']);
      const lifeMax = d3.max(data, d => d['life']);
      const lifeScale = d3.scaleLinear()
              .domain([lifeMin, lifeMax])
              .range([chartHeight, 0]); // y axis -- we reversed this to make the y axis work

      const popMin = d3.min(data, d => d['pop']);
      const popMax = d3.max(data, d => d['pop']);
      const popScale = d3.scaleLinear()
              .domain([popMin, popMax])
              .range([5,10]); // circle size

      const regionScale = d3.scaleOrdinal(d3.schemeCategory10); // don't need to define domain


      // 4. Make some axes before we plot the circles
      //     Let's also style them this time
      // Y axis
      let leftAxis = d3.axisLeft(lifeScale); // ticks looked fine here
      svg.append("g").attr("class", "y axis") // Not d3-required. Just helpful for styling
        .attr("transform","translate("+ (margin.left-10) +","+ margin.top +")")
        .call(leftAxis);

      // X axis
      let bottomAxis = d3.axisBottom(gdpScale).ticks(8, d3.format("$.01s")); // Making simpler ticks without the e
      // Check out http://bl.ocks.org/zanarmstrong/05c1e95bf7aa16c4768e
      let element = svg.append("g").attr("class", "x axis")
        .attr("transform","translate("+ margin.left +","+ (margin.top + chartHeight + 10) +")");
      bottomAxis(element); // Same as .call

      // If you want the axes to "touch" at 0,0, then remove the +- 10 from the translation
      //  but this risks occluding points

      // 5. Let's use axes to make some gridlines too!
      // Y axis
      let leftGridlines = d3.axisLeft(lifeScale).tickSize(-chartWidth-10).tickFormat("");
      svg.append("g").attr("class", "y gridlines") // See CSS at top of file
        .attr("transform","translate("+ (margin.left-10) +","+ margin.top +")")
        .call(leftGridlines);

      // X axis
      let bottomGridlines = d3.axisBottom(gdpScale).tickSize(-chartHeight-10).tickFormat("");
            // Why is tickSize negative?
      element = svg.append("g").attr("class", "x gridlines")
        .attr("transform","translate("+ margin.left +","+ (margin.top + chartHeight + 10) +")");
      bottomGridlines(element);


      // If you want the axes to "touch" at 0,0, then remove the +- 10 from the translation
      //  but this risks occluding points

      // 5. Start plotting circles and see what happens


      let scatter = svg.append("g") // We make a subgroup to contain the points we are adding, and use the margins to shrink it and move it to the right place, so that it doesn't overlap our axes
            .attr("transform","translate("+margin.left+","+margin.top+")");

      data.forEach( (d, i) => {

        let gdp = gdpScale(d['gdp']+1);
        let life = lifeScale(d['life']);
        let pop = popScale(d['pop']);
        let region = regionScale(d['Region']);

        // Draw
        let circle = scatter.append("circle")
              .attr("cx", gdp)
              .attr("cy", life)
              .attr("r", pop)
              .attr("opacity", 0.8)
              .style("fill", region)
              .attr("region", d["Region"])
              .attr("nation", d["nation"]);


          // --- End of class on Feb 18 ---


          // Let's add some mouseovers!



        });


      // See that it looks VERY weird --
      // diagnostics -- console.log(gdpScale(d['gdp']),d);
      // added:  data = data.filter( d => d['gdp'] != 0 );

      // Still looks weird -- squished to corner -- signal you need log scale, which we added


      // 6. Let's borrow our old legend code
      regionScale.domain().forEach(function(d,i) {
        d3.select("#simpleLegend")
          .append("span").text(d)
          .style("color", regionScale(d))
          .on("mouseover", function() {
            scatter.selectAll("circle").each(function() {  // Need to change to scatter. since we may have more circles now
              let circle = d3.select(this);
              if (circle.attr("region") === d) {
                circle.attr("opacity", 0.8);
              }
              else {
                circle.attr("opacity", 0.1);
              }
            })
          })
      });

      // 7. Let's also now add a way to get all circles back after using the legend

    });




  </script>





  <script id="notes2">

  // Let's see how data joins work in d3
  //   This will be our most-used design pattern for the rest of the term
  //   It is not critical for static data, but extremely useful when you have interactivity

  // 1. Housekeeping
  // Get our chart group and chart object
  let demoSVG = d3.select("#joindemo");
  let demoSVGWidth = demoSVG.attr("width");
  let demoSVGHeight = demoSVG.attr("height");
  let demoMargin = { "top": 10, "right": 40, "bottom": 0, "left": 40};
  let demoWidth = demoSVGWidth - demoMargin.left - demoMargin.right; // If you know the key is fixed text, you can access it with . instead of [""]
  let demoHeight = demoSVGHeight - demoMargin.top - demoMargin.bottom;

  // Our editable group
  let demo = demoSVG.append("g").attr("transform","translate("+demoMargin.left+","+demoMargin.top+")");

  // Simple scale for locating some circles


  // Let's make some quick labels for places


  // 2. Conduct a data join whenever a button is pressed
  // This function is called whenever we press a button. Receives new data
  function updateChart(dataset) {

    // Select all the elements you might want, even if they don't exist yet
    //  Assign data to them. This gives you access to the data join functions





  }






  // Helper events for our buttons
  d3.select("#join1").on("mouseup", () => {
    let dat = [1,2,3,4,5];
    d3.select("#printout").text(JSON.stringify(dat));
    updateChart( dat );
  });
  d3.select("#join2").on("mouseup", () => {
    let dat = [1,2,3,4,5,6,7,8];
    d3.select("#printout").text(JSON.stringify(dat));
    updateChart( dat );
  });
  d3.select("#join3").on("mouseup", () => {
    let dat = [3,5,7,8,9,10];
    d3.select("#printout").text(JSON.stringify(dat));
    updateChart( dat );
  });


  </script>

  <script id="notes3">

  // 1. Housekeeping
  // Get our chart group and chart object
  let lineSVG = d3.select("svg#linechart");
  let lineWidth = lineSVG.attr("width");
  let lineHeight = lineSVG.attr("height");
  let lineMargin = { top: 10, right: 10, bottom: 50, left:50};
  let lineChartWidth = lineWidth - lineMargin.left - lineMargin.right;
  let lineChartHeight = lineHeight - lineMargin.top - lineMargin.bottom;


  // 2. Set up some empty scales and axes
  //      X


  //      Y



  // 3. Set up d3's line generator



  //  smoothing functions: .curve(d3.curveMonotoneX), curveStep, curveBasis, curveCardinal


  // 4. Make a home for the line and see how the line generator works


  // 5. Make a home for some circles too!



  function updateLineChart(data) {
    // Nothing happens here... for now
    //console.log(data);

    // A. Update our scales and axes


    // B. The chart is not updating yet. What's left to update?


    // C. Update our line


    // D. Let's also add and update some circles


  }







  // Bind an event listener to the entire page looking for mouse moves every second
  //  Calls updateLineChart with new data if some new moves are detected
  var mouseLocations = [];
  document.body.addEventListener('mousemove',function(e)
  {
    if (mouseLocations.length < 1) {

      mouseLocations.push( {
        "mouseX": e.clientX,
        "mouseY": e.clientY,
        "time": Math.floor(Date.now() / 1000)
      } );
      updateLineChart(mouseLocations);

    }
    else {
      t = Math.floor(Date.now() / 1000);

      // Check if we've reached a new second
      if (mouseLocations[mouseLocations.length-1].time < t) {
        mouseLocations.push( {
          "mouseX": e.clientX,
          "mouseY": e.clientY,
          "time": t
        } );
        if (mouseLocations.length > 30) {
          mouseLocations.shift(); // remove last element added
        }
        updateLineChart(mouseLocations);
      }

    }

  });


  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
  document.getElementById("display3").innerText = document.getElementById("notes3").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
