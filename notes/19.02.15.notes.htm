<html><head>
<title>INFO 3300 - February 15</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
    .legend span {
      margin-right: 10px;
    }
  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for February 15</h3>
  <p>
    Project 1 has started up! Log in there to find your teammates and project instructions. <br/>
    We'll have mentors out later today. Don't forget about milestone 1 tonight.
  </p>
  <p>
    Check out <a href="https://mimno.github.io/showcase/#p1">Professor Mimno's project showcase</a>. The project this year is similar enough to Prof. Mimno's from past years that these examples ought to be useful.
  </p>
  <p>
    Mike Bostock has a <a href="https://bl.ocks.org/mbostock/3019563">handy page discussing chart margins</a>.
  </p>
  <p>
    Learn more about <a href="https://github.com/d3/d3-shape#curveLinear">d3 line smoothing choices</a>.
  </p>

  <h5>HTML for today:</h5>


  <svg id="scatterplot" height="400" width="400" style="background: #eee; margin-top:50px" >

  </svg>
  <div id="simpleLegend" class="legend"> </div>
  <br/>
  <svg id="joindemo" height="300" width="300" style="background: #759bc5; margin-top:50px" >

  </svg>
  <br/>
  <svg id="linechart" height="400" width="400" style="background: #eee; margin-top:50px" >

  </svg>



  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today, part 1:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>
  <h5>Code for today, part 2:</h5>
  <pre>
    <code id="display2" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">


  // Let's make a plain old scatterplot

  // 0. Find our SVG and get that ready
  //     We're going to use a new way of padding that makes axes easier
  let svg = d3.select("svg#scatterplot");
  let width = svg.attr("width");
  let height = svg.attr("height");
  // This is a clever way to do padding that is more adjustable when you are designing
  let margin = { "top": 10, "right": 10, "bottom": 50, "left":50};
  let chartWidth = width - margin["left"] - margin.right; // If you know the key is fixed text, you can access it with . instead of [""]
  let chartHeight = height - margin["top"] - margin.bottom;

  let scatter = svg.append("g") // We make a subgroup to contain the points we are adding, and use the margins to shrink it and move it to the right place, so that it doesn't overlap our axes
        .attr("transform","translate("+margin.left+","+margin.top+")");


  // 1. Import some CSV data
  d3.csv("../datasets/gapminder.csv").then( function(data) {

    // Useful fields:  "Life Expectancy"  "GDP/Person (PPP$)"   "Total Population"

    // 2. Check for data issues
    console.log(data);

    // What we find here are that most of the attributes are imported as strings rather than numbers. Let's cast them.
    data.forEach( (d, i) => {
      d['life'] = Number(d['Life Expectancy']);
      d['gdp'] = Number(d['GDP/Person (PPP$)']);
      // d['Total Population'] = Number(d['Total Population']); // This will pump out NaNs. Why?
      d['pop'] = Number(d['Total Population'].replace(/,/g,"")); // Fix with replace for commas -- /,/g is a regex for commas
    });



    // 3. Let's build some scales
    const gdpMin = d3.min(data, d => d['gdp']);
    const gdpMax = d3.max(data, d => d['gdp']);
    const gdpScale = d3.scaleLinear().domain([gdpMin+1, gdpMax]).range([0, chartWidth]);

    const lifeMin = d3.min(data, d => d['life']);
    const lifeMax = d3.max(data, d => d['life']);
    const lifeScale = d3.scaleLinear().domain([lifeMin, lifeMax])
            .range([chartHeight, 0]);

    const popMin = d3.min(data, d => d['pop']);
    const popMax = d3.max(data, d => d['pop']);
    const popScale = d3.scaleLinear().domain([popMin, popMax]).range([5,10]); // circle size

    const regionScale = d3.scaleOrdinal(d3.schemeCategory10); // don't need to define domain


    // 4. Make some axes before we plot the circles
    // Y axis
    let leftAxis = d3.axisLeft(lifeScale);
    svg.append("g")
      .attr("class", "y axis")
      .attr("transform","translate("+(margin.left-10)+","+margin.top+")") // -10 to keep it away from chart area
      .call(leftAxis);

    // X axis
    let bottomAxis = d3.axisBottom(gdpScale)
    let element = svg.append("g")
      .attr("class", "x axis")
      .attr("transform","translate("+margin.left+","+(chartHeight + margin.top+10)+")") // +10 to keep away from chart area
    bottomAxis(element); // This is what .call is doing, just less elegantly

    // If you want the axes to "touch" at 0,0, then remove the +- 10 from the translation
    //  but this risks occluding points

    // --- End of class, left as exercise until Monday


    // 5. Start plotting circles and see what happens

    // Some things will look weird here, so we might have to adjust scales and check for more bad values...



    // 6. Let's borrow our old legend code



    // 7. Let's also now add a way to get all circles back after using the legend
    //    hint: try out the .on("mouseout") event for the legend element to find when the mouse leaves that area






  </script>





  <script id="notes2">


  });


  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
