<html><head>
<title>INFO 3300 - February 2</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
    .legend span {
      margin-right: 10px;
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

    .line {
      stroke: steelblue;
      fill: none;
    }

    circle {
      fill: darkblue;
      stroke: none;
    }


  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for February 22</h3>
  <p>
    Learn more about <a href="https://github.com/d3/d3-shape#curveLinear">d3 line smoothing choices</a>. <a href="https://bl.ocks.org/d3noob/ced1b9b18bd8192d2c898884033b5529">Here</a> is a helpful block.
  </p>
  <p>
    <a href="http://bl.ocks.org/zanarmstrong/05c1e95bf7aa16c4768e">This blocks demo</a> might be helpful for generating new tick formattings.
  </p>
  <p>
    Christopher Healey provides an <a href="https://www.csc2.ncsu.edu/faculty/healey/PP/">amazing resource on viz perception</a> that you might want to check out.
  </p>

  <h5>HTML for today:</h5>

  <svg id="linechart" height="300" width="600" style="background: #eee; margin-top:50px" >

  </svg>


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">

  // 1. Housekeeping
  // Get our chart group and chart object
  let lineSVG = d3.select("svg#linechart");
  let lineWidth = lineSVG.attr("width");
  let lineHeight = lineSVG.attr("height");
  let lineMargin = { top: 10, right: 10, bottom: 50, left:50};
  let lineChartWidth = lineWidth - lineMargin.left - lineMargin.right;
  let lineChartHeight = lineHeight - lineMargin.top - lineMargin.bottom;


  // 2. Set up some empty scales and axes
  //      X
  let xLineScale = d3.scaleLinear().range([0, lineChartWidth]);
  let xLineAxis = d3.axisBottom(xLineScale)  //.tickFormat

  lineSVG.append("g")
    .attr("class", "x axis")
    .attr("transform","translate("+lineMargin.left+","+(lineChartHeight + lineMargin.top+10)+")")
    .call(xLineAxis);

  //      Y
  let yLineScale = d3.scaleLinear().range([0, lineChartHeight]);
   // note that we start at 0 because it makes more sense for our mouseY values to start in the upper left corner as opposed to the conventional lower left corner
  let yLineAxis = d3.axisLeft(yLineScale)  //.tickFormat

  lineSVG.append("g")
    .attr("class", "y axis")
    .attr("transform","translate("+(lineMargin.left-10)+","+lineMargin.top+")")
    .call(yLineAxis);


  // 3. Set up d3's line generator
  //      Need to tell it how to get x and y
  var line = d3.line()
                 .x( (d,i) => xLineScale( i ))
                 .y(  d    => yLineScale( d.mouseY ));
  // d3.line() returns a *function* that accepts a datapoint and spits out the string that goes in the "d" attribute of a <path>

  // Try adding a smoothing function after .x and .y using .curve(func) : .curve(d3.curveMonotoneX), curveStep, curveBasis, curveCardinal


  // 4. Make a home for the line & the line itself. See how the line generator works
  let lineLayer = lineSVG.append("g").attr("transform","translate("+(lineMargin.left)+","+lineMargin.top+")")


  lineLayer.append("path").attr("class","line")
      .datum( [] ) // datum is the single form of .data -- it sends the whole list of data to one element instead of .data mapping each row to an element
        // We need to give d3.line() some .datum to start with, so we provide an empty array
        //  If you already know what your data look like, you can just give it the whole dataset at this point
      .attr("d", line);
      // equivalent to .attr("d", d => line(d)), recall that d3.line() returns a function that takes a datapoint parameter



  // 5. Make a home for some circles too!
  let circLayer = lineSVG.append("g").attr("transform","translate("+(lineMargin.left)+","+lineMargin.top+")")


  function updateLineChart(mouseData) {
    console.log(mouseData);

    // Update our axes
    xLineScale.domain([ 0,mouseData.length-1 ]);
    xLineAxis.ticks(mouseData.length-1 );

    // Use d3.extent to get min and max in one command
    // let minMax = d3.extent(mouseData, d => d.mouseY);
    // console.log(minMax);
    // yLineScale.domain( minMax );

    // For now, we are going to set the yLineScale domain based on the **whole window** of the browser
    yLineScale.domain( [ 0, window.innerHeight ] );

    // Select the axis <g> tag using a class, then call lineAxis again on them to update. Added a transition() to animate the change
    lineSVG.select(".x").transition().duration(300).call(xLineAxis);
    lineSVG.select(".y").transition().duration(300).call(yLineAxis);

    // Make some circles
    let circles = circLayer.selectAll("circle").data(mouseData);   // We want to use .data here because we want one circle per row

    circles.enter().append("circle")
      .attr("r",4)
      .style("fill","darkblue")
      .attr("cx", (d,i) => xLineScale( i ) )
      .attr("cy", d => yLineScale( d.mouseY ))
      // Chaining in .merge here adds any of the circles circLayer.selectAll found and let's us run functions on all of them together
      //  this is good for things you want to UPDATE on existing points and SET for new points
      .merge(circles)
      .attr("cx", (d,i) => xLineScale( i ) )
      .attr("cy", d => yLineScale( d.mouseY ));

    circles.exit().remove();

    // Like the axes, we need to get the path to call .line again
    //  We want to use .datum here because we want one path for all of the rows
    //  We can add .transition() to animate, but it looks odd
    lineSVG.select(".line").datum(mouseData).attr("d", line);



  }







  // Bind an event listener to the entire page looking for mouse moves every second
  //  Calls updateLineChart with new data if some new moves are detected
  var mouseLocations = [];
  let tickSize = 1000; //in milliseconds
  let totalTimeWindow = 15; //in seconds
  let totalTicks = (totalTimeWindow*1000) / tickSize;
  document.body.addEventListener('mousemove',function(e)
  {
    if (mouseLocations.length < 1) {

      mouseLocations.push( {
        "mouseX": e.clientX,
        "mouseY": e.clientY,
        "time": Math.floor(Date.now() / tickSize)
      } );
      updateLineChart(mouseLocations);

    }
    else {
      t = Math.floor(Date.now() / tickSize);

      // Check if we've reached a new second
      if (mouseLocations[mouseLocations.length-1].time < t) {
        mouseLocations.push( {
          "mouseX": e.clientX,
          "mouseY": e.clientY,
          "time": t
        } );
        if (mouseLocations.length > totalTicks) {
          mouseLocations.shift(); // remove last element added
        }
        updateLineChart(mouseLocations);
      }

    }

  });


  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
