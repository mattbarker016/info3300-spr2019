<html><head>
<title>INFO 3300 - February 13</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
    #simpleLegend span {
      margin-right: 10px;
    }
  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for February 13</h3>
  <p>
    Project 1 is now posted on CMS! Log in there to find your teammates and project instructions.
  </p>
  <p>
    Check out <a href="https://mimno.github.io/showcase/#p1">Professor Mimno's project showcase</a>. The project this year is similar enough to Prof. Mimno's from past years that these examples ought to be useful.
  </p>
  <p>
    You can find a bunch of D3 examples <a href="https://github.com/d3/d3/wiki/Gallery">here</a> and access <a href="https://github.com/d3/d3/blob/master/API.md">D3's online API reference</a>. D3 also has a number of <a href="https://github.com/d3/d3-scale-chromatic/blob/master/README.md">pre-generated color scales</a>.
  </p>
  <p>
    <a href="https://www.kaggle.com/martinellis/nhl-game-data#game_plays.csv">Source</a> for our second dataset today.
  </p>

  <h5>HTML for today:</h5>




  <svg id="all" height="400" width="400" style="background: #F5F5F5">
    <!--- We're going to be populating this dynamically today --->
  </svg>
  <br/>
  <svg id="male" height="400" width="300" style="background: #F5F5FF">
    <!--- We're going to be populating this dynamically today --->
  </svg>
  <svg id="female" height="400" width="300" style="background: #FFF5F5">
    <!--- We're going to be populating this dynamically today --->
  </svg>




  <!--- For our second dataset >>> Each pixel is 0.25 feet --->
  <svg id="hockey" height="350" width="430" style="margin-top:50px" >

    <g id="rink" transform="translate(20,5)">
      <line x1="1" x2="1" y1="2" y2="340" style="opacity:0.7;stroke:#aa1111;stroke-width:3;stroke-linecap:round;stroke-dasharray:5,5;"/>
      <line x1="100" x2="100" y1="0" y2="340" style="opacity:0.7;stroke:#224499;stroke-width:6;"/>
      <line x1="356" x2="356" y1="2" y2="338" style="opacity:0.7;stroke:#aa1111;stroke-width:3;"/>
      <path d="M356,158 L338,158 a24,24 1 0,0 0,24 L356,182" style="opacity:0.7;fill:#cc3333;stroke:#aa1111;stroke-width:3;"/>
      <rect x="-400" y="0" width="800" height="340" rx="56" ry="56" style="fill:none;stroke-width:4;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke:#000;"/>
    </g>

    <g id="viz" transform="translate(20,5)">
    </g>

  </svg>
  <div id="simpleLegend"> </div>





  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today, part 1:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>
  <h5>Code for today, part 2:</h5>
  <pre>
    <code id="display2" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">

  // First, some data:
  passengers = [{"age": 0, "lived": 21, "died": 13}, {"age": 5, "lived": 21, "died": 11}, {"age": 10, "lived": 12, "died": 16}, {"age": 15, "lived": 27, "died": 33}, {"age": 20, "lived": 64, "died": 115}, {"age": 25, "lived": 67, "died": 104}, {"age": 30, "lived": 132, "died": 285}, {"age": 35, "lived": 46, "died": 62}, {"age": 40, "lived": 28, "died": 57}, {"age": 45, "lived": 23, "died": 39}, {"age": 50, "lived": 27, "died": 25}, {"age": 55, "lived": 15, "died": 17}, {"age": 60, "lived": 11, "died": 16}, {"age": 65, "lived": 4, "died": 10}, {"age": 70, "lived": 0, "died": 5}, {"age": 75, "lived": 1, "died": 1}, {"age": 80, "lived": 1, "died": 0}];

  passengersFemale = [{"age": 0, "lived": 10, "died": 6}, {"age": 5, "lived": 12, "died": 3}, {"age": 10, "lived": 5, "died": 8}, {"age": 15, "lived": 23, "died": 5}, {"age": 20, "lived": 48, "died": 21}, {"age": 25, "lived": 42, "died": 14}, {"age": 30, "lived": 83, "died": 47}, {"age": 35, "lived": 35, "died": 5}, {"age": 40, "lived": 21, "died": 7}, {"age": 45, "lived": 17, "died": 6}, {"age": 50, "lived": 18, "died": 2}, {"age": 55, "lived": 11, "died": 1}, {"age": 60, "lived": 9, "died": 1}, {"age": 65, "lived": 4, "died": 1}, {"age": 70, "lived": 0, "died": 0}, {"age": 75, "lived": 1, "died": 0}, {"age": 80, "lived": 0, "died": 0}];

  passengersMale = [{"age": 0, "lived": 11, "died": 7}, {"age": 5, "lived": 9, "died": 8}, {"age": 10, "lived": 7, "died": 8}, {"age": 15, "lived": 4, "died": 28}, {"age": 20, "lived": 16, "died": 94}, {"age": 25, "lived": 25, "died": 90}, {"age": 30, "lived": 49, "died": 238}, {"age": 35, "lived": 11, "died": 57}, {"age": 40, "lived": 7, "died": 50}, {"age": 45, "lived": 6, "died": 33}, {"age": 50, "lived": 9, "died": 23}, {"age": 55, "lived": 4, "died": 16}, {"age": 60, "lived": 2, "died": 15}, {"age": 65, "lived": 0, "died": 9}, {"age": 70, "lived": 0, "died": 5}, {"age": 75, "lived": 0, "died": 1}, {"age": 80, "lived": 1, "died": 0}];

  // 1. Let's make a doubled histogram of all passengers on the Titanic
  let svg = d3.select("svg#all");
  let width = svg.attr("width");
  let height = svg.attr("height");

  let maxMortality = d3.max(passengers, function(d) { return Math.max(d['lived'],d['died']); });
  let ageScale = d3.scaleLinear().domain([0,80]).range([10,width-10]);
  let livedScale = d3.scaleLinear().domain([0,maxMortality]).range([10,height/2]);
  let diedScale = d3.scaleLinear().domain([0,maxMortality]).range([0,height/2-10]);

  // Lines for "lived" side
  passengers.forEach(function(d, i) {
    svg.append("line")
      .attr("x1",ageScale( d['age'] ))
      .attr("x2",ageScale( d['age'] ))
      .attr("y1",height/2)
      .attr("y2",height/2 - livedScale( d['lived'] ))
      .style("stroke", "#5555F0")
      .style("stroke-width", 10);
  });
  // Lines for "died" side
  passengers.forEach(function(d, i) {
    svg.append("line")
      .attr("x1",ageScale( d['age'] ))
      .attr("x2",ageScale( d['age'] ))
      .attr("y1",height/2)
      .attr("y2",height/2 + diedScale( d['died'] ))
      .style("stroke", "#F05555")
      .style("stroke-width", 10);
  });
  // How about some labels? We can reuse our existing scales
  passengers.forEach(function(d,i) {
    svg.append("text")
     .attr("text-anchor","middle")
     .attr("font-size","15px")
     .attr("x",ageScale(d['age']))
     .attr('y',height/2 - livedScale( d['lived'] ) - 10)
     .text(d['age'])
     .style("font-size","13px");


   });

   // 2. Let's make histograms by gender
   // Male case
   svg = d3.select("svg#male");
   width = svg.attr("width");
   height = svg.attr("height");

   // SCALES BETWEEN THE THREE WILL DISAGREE, so we don't make new maxMortality here
   ageScale = d3.scaleLinear().domain([0,80]).range([10,width-10]);
   livedScale = d3.scaleLinear().domain([0,maxMortality]).range([10,height/2]);
   diedScale = d3.scaleLinear().domain([0,maxMortality]).range([0,height/2-10]);

   // Lines for "lived" side
   passengersMale.forEach(function(d, i) {
     svg.append("line") // Lived
       .attr("x1",ageScale( d['age'] ))
       .attr("x2",ageScale( d['age'] ))
       .attr("y1",height/2)
       .attr("y2",height/2 - livedScale( d['lived'] ))
       .style("stroke", "#5555F0")
       .style("stroke-width", 10);
     svg.append("line") // Died
       .attr("x1",ageScale( d['age'] ))
       .attr("x2",ageScale( d['age'] ))
       .attr("y1",height/2)
       .attr("y2",height/2 + diedScale( d['died'] ))
       .style("stroke", "#F05555")
       .style("stroke-width", 10);
     svg.append("text") // Labels
      .attr("text-anchor","middle")
      .attr("x",ageScale(d['age']))
      .attr('y',height/2 - livedScale( d['lived'] ) - 10)
      .text(d['age'])
      .style("font-size","10px");
   });
   svg.append("text").text("Male Passengers").attr("x",10).attr("y",20).style("font-size","15px");

   // Female case
   svg = d3.select("svg#female");
   width = svg.attr("width");
   height = svg.attr("height");

   // SCALES BETWEEN THE THREE WILL DISAGREE, so we don't make new maxMortality here
   ageScale = d3.scaleLinear().domain([0,80]).range([10,width-10]);
   livedScale = d3.scaleLinear().domain([0,maxMortality]).range([10,height/2]);
   diedScale = d3.scaleLinear().domain([0,maxMortality]).range([0,height/2-10]);


   passengersFemale.forEach(function(d, i) {
     svg.append("line") // Lived
       .attr("x1",ageScale( d['age'] ))
       .attr("x2",ageScale( d['age'] ))
       .attr("y1",height/2)
       .attr("y2",height/2 - livedScale( d['lived'] ))
       .style("stroke", "#5555F0")
       .style("stroke-width", 10);
     svg.append("line") // Died
       .attr("x1",ageScale( d['age'] ))
       .attr("x2",ageScale( d['age'] ))
       .attr("y1",height/2)
       .attr("y2",height/2 + diedScale( d['died'] ))
       .style("stroke", "#F05555")
       .style("stroke-width", 10);
     svg.append("text") // Labels
      .attr("text-anchor","middle")
      .attr("x",ageScale(d['age']))
      .attr('y',height/2 - livedScale( d['lived'] ) - 10)
      .text(d['age'])
      .style("font-size","10px");
   });
   svg.append("text").text("Female Passengers").attr("x",10).attr("y",20).style("font-size","15px");


  </script>


  <script id="notes2">


  // Let's import a dataset of NHL goals from 2012 to 2017
  //  NOTE: NHL rinks are 200ft by 85ft, or 100x85 a side with 28ft rounded edges
  //    Our SVG canvas maps 1 foot to 4 pixels

  // (0. Check out the SVG element and add some padding using transform)

  // 1. Get our SVG element and import some data!
  //     (NOTE: Imports will fail unless you launch your server in the root dir of the repository)

  let layer = d3.select("g#viz");

  d3.json("../datasets/nhl_goals.json").then( function(data) {
     // .then acts on promise provided by .json
     // .json sends along the loaded data as a parameter when it fulfills the promise
     // This can also be done using the "await" construction, but that is more complex to build properly

    //console.log(data);

    // 2. Build some scales
    // (We've applied a transform to the SVG rather than scales to make padding easier, so range() can start at 0)
    let xScale = d3.scaleLinear().domain([0,100]).range([0,400]);
    let yScale = d3.scaleLinear().domain([-42.5,42.5]).range([0,340]);
    let colorScale = d3.scaleOrdinal(d3.schemeCategory10); // This builds its range as data come in

    // 3. Add circles
    data.forEach(function(d,i) {

      layer.append("circle")
            .attr("r",4)
            .attr("cx", xScale( d['x'] ))
            .attr("cy", yScale( d['y'] ))
            .style("fill",colorScale( d['secondaryType'] ))
            .attr("opacity",0.05)
            .attr("label",d['secondaryType']);
            // If colorScale() seen the secondaryType before, it returns the color it gave it
            // If it hasn't seen this secondaryType before, it assigns a new color to it and remembers it
            // We added label as a debugging tool and also a helpful reference for the legend
    });


    // 4. Spot check data
    //   We didn't do this on Feb13 -- let's do this Friday


    // 5. Make a simple legend with mouseovers
    console.log(colorScale.domain());
    colorScale.domain().forEach(function(d,i) {
      d3.select("#simpleLegend")
        .append("span").text(d)
        .style("color", colorScale(d))
        .on("mouseover", function() {
          // Creates a function for each of the secondaryTypes when you mouse over it
          d3.selectAll("circle").each(function() {
            let circle = d3.select(this);
            if (circle.attr("label") === d) {
              // The reason "d" works here is because it is stored within the function when you create it and bind it to mouseover. It is not lost after forEach completes
              circle.attr("opacity", 0.4);
            }
            else {
              circle.attr("opacity", 0.01);
            }
          })

        })
    })
    // Later we will go through another way to build legends without the .attr("label") madness


    // --- End of class

    // 6. Let's make a heatmap
    // If we have extra time!
    // a. Bin points


    // b. Construct scales


    // c. Create boxes


});




  // Helper function for heatmap
  function createBuckets(data, xGet, yGet, xDomain, yDomain, bucketSize) {
    let buckets = [];  // Create empty buckets
    for (let x = xDomain[0]; x < xDomain[1]; x=x+bucketSize) {
      let bucket = [];
      for (let y = yDomain[0]; y < yDomain[1]; y=y+bucketSize) {
        bucket.push(0);
      }
      buckets.push(bucket);
    }
    for (let i = 0; i < data.length; i++) {  // Populate buckets
      let x = Math.floor((xGet(data[i]) - xDomain[0]) / bucketSize);
      let y = Math.floor((yGet(data[i]) - yDomain[0]) / bucketSize);
      buckets[x][y]++;
    }
    return buckets;
  }
  </script>


  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>

  <script>
  document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
