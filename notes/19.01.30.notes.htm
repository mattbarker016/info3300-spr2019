<html><head>
<title>INFO 3300 - January 30</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/highlight.min.js"></script>

  <style>

  .header {
    font-weight: bold;
  }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for Monday, January 29</h3>

  <p>
    Execute a <tt>git pull</tt> in your repository directory to download new files. Prompt files won't change after posting, so feel free to modify them as you like. Here once again is an <a href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
  </p>

  <p>To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute python in cmd for version number).
  </p>

  <p>
    How does Javascript differ among popular web browsers? <a href="https://caniuse.com/#feat=arrow-functions">Can I Use</a> breaks down browser support and <a href="https://en.wikipedia.org/wiki/Usage_share_of_web_browsers">Browser Usage</a> on Wikipedia shows current market share. Count on your TAs using recent Chrome browsers to evaluate your assignments, but remember that much of the world is not. Even browser usage stats can be misleading if you are intending for your site to be used by members of the Global South.
  </p>

  <p>
    Review <a href="http://www.json.org">Javascript Object Notation</a>.
  </p>

  <p>
    To learn more about functions, check out <a href="http://ejohn.org/apps/learn/">this tutorial by John Resig</a>
  </p>

  <h5>HTML for today:</h5>

  <!-- Here's a standard HTML div element with an ID and a class -->
  <div id="d1" newproperty="custom_property" class="header" style="color: red;">
    Hello.
  </div>

  <!-- Here's an SVG canvas element. Note that in this file it looks like the <div> above. -->
  <svg height="200" width="200">
    <!-- Visual elements are represented by tags, which have attributes -->
    <rect x="50" y="30" r="30" width="40" height="50" id="rect1" style="fill: rgb(0, 200, 20); stroke-width: 5; stroke: black;"></rect>
    <rect x="100" y="30" r="30" width="40" height="25" id="rect2" style="fill: rgb(0, 20, 200); stroke-width: 5; stroke: black;"></rect>
  </svg>

  <!-- Here are two types of form inputs. -->
  <input id="entry" type="text" value="Hello?">
  <input id="slider" type="range" min="30" max="150" value="50">

  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display" class="hljs javascript">
    </code>
  </pre>


  <script id="notes">

  console.log(color); // sometimes will work, (maybe) if assgined seperately

  // We can hoist functions that are explicitly named!
  display(favoriteColor); // These two appear much later in the file, but we can call them now

  // * More on VAR versus LET
  var fruit = "orange";
  var veg = "carrot";
  if (fruit === "orange") {
    let fruit = "apple";
    var veg = "leek";
    console.log("--in if");
    console.log(fruit);
    console.log(veg);
  }
  console.log("--out if");
  console.log(fruit);
  console.log(veg);
  // Notice how "veg" is changed outside of the "if" scope, but "fruit" does not stay overwritten


  // * Let's talk JSON
  // JSON is used as a way to convey complex data over the web (e.g. getting data from an API elsewhere)
  // Key benefit over something like serialization is that it is standardized and very human-readable

// MINE

  let obj = [
    {"name": "DDWA", "number": 3300},
    {"name": "Java", "number": 2110},
    {"name": "Python", "number": 1110}
  ];

  console.log(obj);
  console.log(JSON.stringify(obj));

  let bad_str = '{"list": ["commas,", "single_quo\'tes", "double_quotes", "@sçi|"], "nestedObject": {"defined": 3.1415926535}, "bool": true}'

  console.log(bad_str);
  console.log(JSON.parse(bad_str));

  // * Functions and loops in c/java style and functional style.

  function favoriteColor() {
    return "blue"
  }
  let favoriteAnimal = function() { return "dog" }

  function display(f) {
    console.log(f)
  }

  // mult(3)()
  let mult = function(number) {
    return function() { return number * 100; };
  }

  // * Modify the text and attributes of the text tag.

  let div = document.getElementById("d1");
  div.innerText = "Goodbye";
  div.style.color = "green";

  let textEntry = document.getElementById("entry");
  console.log(textEntry.textarea);

  let slider = document.getElementById("slider");
  slider.oninput = function () {
    let val = slider.value;
    let rect1 = document.getElementById("rect1");
    rect1.setAttribute("height", val);
    let rect2 = document.getElementById("rect2");
    rect2.setAttribute("height", val / 2.0);
  }


  // * Modify attributes and styles of an SVG shape.

// THEIRS

  let obj = [{"name": "DDWA", "number": 3300 },{"name": "Java", "number": 2110},{"name": "Python", "number": 1110}];
  console.log(obj);
  console.log(JSON.stringify(obj)); // Here is a JSON string for that object

  // This one won't parse because it breaks JSON specifications
  let badStr = '{"list": ["commas,", "single_quo\'tes", "double_quo"tes", "@sÃ§i|"], "nestedObject": {"undefined": undefined, "defined": 3.1415926535}, "Infinity": Infinity, "NaN": NaN, "bool": true}'
  //console.log(JSON.parse(badStr));
  // Here is the fixed version, note escaped quotes, eliminated undefined, and no reserved numbers
  // The \' is present because I used '' to create the string and need to escape quotes within it
  // The \\" is present to escape the backslash so that the JSON string has \" in it, which is a required by the spec
  let goodStr = '{"list": ["commas,", "single_quo\'tes", "double_quo\\"tes", "@sçi|"], "nestedObject": {"undefined": null, "defined": 3.1415926535}, "bool": true}'
  console.log(goodStr);
  console.log(JSON.parse(goodStr));

  // * Functions and loops in c/java style and functional style.

  // Familiar format -- declaring a named function
  function favoriteColor() {
    return "red";
  }
  console.log(favoriteColor); // log() happily prints the function out
  console.log(favoriteColor()); // execute functions as in other languages

  // Anonymous functions -- given a name through assignment later on (or left anonymous)
  let favoriteAnimal = function(){ return "dog"; };
  console.log(favoriteAnimal());
  console.log(typeof(favoriteAnimal));

  // Functions are actually objects, and you can treat them that way
  favoriteAnimal.n = "storedProperty";
  console.log(favoriteAnimal.n);
  // Please don't do this unless absolutely necessary

  // Functions can take functions as arguments
  function display(f) {
    console.log("Displaying: "+f()); // JS happily casts whatever f() returns to a String
  }

  display(favoriteAnimal); // Notice there are no () here, it's just sending over the function
  display(favoriteColor);

  // END

  // Functions can also RETURN functions!
  let mult = function(number) {
    return function() { return number * 100; };
  };
  console.log(mult(3)()); // Extra () here is to execute the function that mult returned
  // Used in things like memoization and lazy evaluation, see Resig tutorial


  // * Modify the text and attributes of the text tag.
  let div = document.getElementById("d1"); // Retrieve element
  console.log(div);
  div.innerText = "Goodbye"; // Modify the text inside it
  div.style.color = "green"; // Change style
  // we can retrieve any HTML attributes with a getter command
  console.log(div.getAttribute("newproperty"));

  let textentry = document.getElementById("entry");
  console.log(textentry.value); // Things inside of the text box sit inside of value instead of innerText

  // * Modify attributes and styles of an SVG shape (analogous to example above).
  let rect1 = document.getElementById("rect1");
  rect1.style.fill = "#a02";
  rect1.style.strokeWidth = 7;
  rect1.style.stroke = favoriteColor();

  // * Set an event listener that connects the slider tool with the SVG rects.
  let slider = document.getElementById("slider"); // Get the slider
  slider.oninput = function() { // slider.oninput takes in a function and calls it whenever user inputs new data (moves it)
    // Note, you'll sometimes see slider.oninput written as slider.addEventListener('input', function() { ...
    //  These both do the same thing. See documentation on JS events for all of the on__ stuff you can access
    let val = slider.value; // Get the current slider position
    let rect1 = document.getElementById("rect1");
    rect1.setAttribute("height", val); // Scale bar
    let rect2 = document.getElementById("rect2");
    rect2.setAttribute("height", val / 2.0); // Scale bar half as much
  }
  console.log(slider.oninput); // We can still recover the anonymous function from the property

  </script>


  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display").innerText = document.getElementById("notes").innerText;
  hljs.initHighlightingOnLoad();
  </script>


  </div>
</body>
</html>
