<html><head>
<title>INFO 3300 - March 27</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>

  line.dashed {
    stroke: #aaa;
    stroke-width: 1px;
    stroke-dasharray: 2;
  }
  text.axis {
    text-anchor: end;
    font-variant: all-small-caps;
  }


  </style>
</head>

<body>
  <div class="container larger">
  <h3>Notes for March 29</h3>
  <p>Don't forget that the project demo day and deadline are fast approaching! Demos on April 10.</p>
  <p>Check out the documentation for <a href="https://github.com/d3/d3-force">d3.force</a> and the subsection for available <a href="https://github.com/d3/d3-force#forces">forces</a></p>
  <p>It turns out that d3 does not put every node at 0,0 directly if x and y are null. Instead, it staggers them using a <a href="https://observablehq.com/@mbostock/phyllotaxis">phyllotaxis arrangement</a>.</p>
  <p>Here is the d3.drag <a href="https://github.com/d3/d3-drag">documentation</a> and an <a href="https://bl.ocks.org/mbostock/3127661b6f13f9316be745e77fdfb084">example that combines drag and zoom</a>.</p>

  <h5>HTML for today:</h5>

  <svg id="graph" height="800" width="800" style="background: #sff; margin-top:50px" >
  </svg>
  <div>
  <button id="play">Play</button>
  <button id="stop">Stop</button>
  <button id="tick">Tick</button>
  </div>


  <svg id="graph2" height="800" width="800" style="background: #sff; margin-top:50px" ></svg>


  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
      <!--- autofilled --->
    </code>
  </pre>


  <script id="notes1">

  // Layer for drawing
  const layer = d3.select("#graph").append("g");
  const width = d3.select("#graph").attr("width");
  const height = d3.select("#graph").attr("height");
  const colorScale = d3.scaleOrdinal(d3.schemeSet1);

  // Second later for some later drawings
  const layer2 = d3.select("#graph2").append("g");

  // Circle indicators for the radial force-directed graph
  //   AFTER CLASS: made wider bands for the circles using stroke-width
  for (let i=0; i<=4; i++) {
    layer.append("circle").attr("cx",width/2).attr("cy",height/2).attr("fill","none").attr("stroke","#f5f5f5").attr("r",i*80).attr("stroke-width",40);
  }

  const requestData = async () => {

    // Load dataset of CIS classes (note, I made this by hand so there probably will be tons of errors)
    const classes = await d3.json("../datasets/classes.json");
    console.log(classes)
    //console.log(classes);

    //Assemble data structures for a graph
    var nodes = classes; // nodes can be just plain objects
    var links = []; // links must have source,target as edge list

    // Loop through nodes to build edges
    nodes.forEach( node => {
      // add course level and prefix using regex
      node.level = parseInt(/[A-Z]+(\d)/.exec(node.course)[1]);
      node.prefix = /([A-Z]+)/.exec(node.course)[1];

      // One edge per pre-requisite course
      node['pre-reqs'].forEach( req => {
        // have to deal with crosslisting
        let candidate = nodes.find( d => {
          return (d.course === req) || (d.crosslist.indexOf(req) !== -1);
        });

        links.push( { source: node.course, target: candidate.course } );

      });

      // Set initial positions with a bit of noise
      node.x = width/2.0 + d3.randomUniform(-200,200)();
      node.y = height/2.0 + d3.randomUniform(-200,200)();

    });



    // // Build a simulation for the graph
    // var sim = d3.forceSimulation()
    //             .nodes(nodes)
    //             .force("links", d3.forceLink()   // Keep nodes that are connected near each other
    //                                     .links(links)           // give the force an array of source/target objects
    //                                     .id( d => d.course ) )
    //                                            // if source and target don't provide array indices for nodes, .id will tell the force what to look for in the nodes when it is trying to connect things together. Provide a getter function for _node elements_
    //             .force("repulse", d3.forceManyBody().strength(-30) ) // electrostatic repulsion between all nodes to space them out
    //             // we eliminated the centering force because it only _moves_ points to be centered at a coordinate, doesn't apply a velocity
    //             .force("x", d3.forceX(width/2.0).strength(0.02))
    //             .force("y", d3.forceY(height/2.0).strength(0.02)) // using positioning forces instead to try to drag some of the singletons inwards
    //                // instead of a positioning force across all points, you could imagine using a d => (d.isFlyingOff()) ? _ : _ construction
    //             .on("tick", render);

    // We built this second simulation to try to separate out the different levels of courses
    // Using the forceRadial function, we attract points to circles with a radius of (80 * course level)
    var sim = d3.forceSimulation()
                .nodes(nodes)
                .force("links", d3.forceLink()   // Keep nodes that are connected near each other
                                        .links(links)           // give the force an array of source/target objects
                                        .id( d => d.course ) )
                                               // if source and target don't provide array indices for nodes, .id will tell the force what to look for in the nodes when it is trying to connect things together. Provide a getter function for _node elements_
                .force("repulse", d3.forceManyBody().strength(-50) ) // electrostatic repulsion between all nodes to space them out points don't fly away completely
                .force("radius", d3.forceRadial().radius( d => 80 * d.level ).x(width/2.0).y(height/2.0).strength(5) ) // attract points into rings based on course level
                .force("collide", d3.forceCollide().radius(10)) // use collision because the rings tend to push points on top of one another
                .on("tick", render)
                .stop();


    console.log(" Nodes and links ");
    console.log(nodes);
    console.log(links);
    // Notice how after building the d3.forceLink the source/target pointers in links have been changed to point to elements in nodes. This will allow us to draw the edges very easily

    // Do any pre-computing of ticks to smooth the animation?
    //  AFTER CLASS -- added a for loop here to precompute a few ticks
    //sim.stop();
    for (let i=0; i<50; i++) { sim.tick(); }
    //sim.restart();

    sim.tick()
    sim.tick()
    console.log(links)
    console.log(nodes)

    // Update the chart for a new tick of the simulation
    function render() {

      // Edges
      let lines = layer.selectAll("line.link").data(links)
      lines.enter().append("line").attr("class","link")
           .attr("stroke","#333")
           .merge(lines)
           .attr("x1", d => d.source.x).attr("x2", d => d.target.x)   // Using the pointers d3.forceLink provides to access node x and y coords
           .attr("y1", d => d.source.y).attr("y2", d => d.target.y);

      // Nodes
      let circles = layer.selectAll("circle.node").data(nodes); // (returns nothing the first time render is called, then returns all circles)
      circles.enter() // get a list of new circles to add (full the first time we call render, empty from then on)
             .append("circle")
             .attr("class","node")
             .attr("fill", d => colorScale(d.prefix))
             .attr("stroke", "#333")
             .attr("r", 6)
             .attr("cx", 0)
             .attr("cy", 0)

             .call( d3.drag().on("start",dragstart).on("drag",dragging).on("end",dragend) )

             .merge(circles) // brings circles that were found by layer.selectAll back in so that we can edit BOTH the new stuff AND existing stuff
             .attr("transform", d => "translate("+d.x+","+d.y+")");


       // We are using a transform to move circles around rather than cx and cy
       //  This occasionally does have performance implications -- some browsers/GPUs can "cache" the circles drawn and then just paint the same circle over again if you use transform (technically: store the image in a frame buffer and then blit it somewhere), but might have to redraw the pixels if you change r, cx, cy, etc.
       //  This isn't at all guaranteed, and is still pretty rare. That said, this can be a good practice to get into if you are scaling up
       //    (Though if you really need to scale up, then SVG will quickly stop performing)



    }

    render();  // Call render once to make sure we draw circles even if simulation stops



    // Handle drag events and add a nice text label
    var label = layer.append("text").attr("id","label");

    function dragstart(d) {
      // Begin dragging a circle, make sure the simulation reserves enough alpha to react
      // We use d3.event.active here to make sure we handle multitouch (wanted to expose this edge case here)
      // This is also a boolean that can help to differentiate when you are using both a pan and a drag
      if (!d3.event.active) {
        // alphaTarget here is the "minimum" alpha allowed in the model
        // If it is greater than 0, then points are always allowed to move a bit
        // During the drag we want it to be >0 so that the model can shift around
        // Too low and it feels mushy. Too high and it feels jumpy or falls apart
        label.text(d.course);
        sim.alphaTarget(0.08).restart();
      }

      // We initially tried d.x=d3.event.x; The problem here was that the model is changing d.x in real time.
      // In the best case, it just means the drag and model fight, leading to points that vibrate
      // In the worst case, you run into a race condition or other concurrency issue

      // Putting values into d.fy and d.fx signal to d3 that you are FIXING the point in a location -- usually used for drags
      // This disallows the simulation from changing x and y of this point
      d.fx = d3.event.x;
      d.fy = d3.event.y;

      label.attr("x",d3.event.x).attr("y",d3.event.y);
    }
    function dragging(d) {

      d.fx = d3.event.x;
      d.fy = d3.event.y;
      label.attr("x",d3.event.x).attr("y",d3.event.y);

    }
    function dragend(d) {

      // End dragging a circle, make sure the simulation has enough alpha left to fix things afterwards
      if (!d3.event.active) {
        sim.alphaTarget(0); // Allow the simulation to cool completely again
        label.text("");
      }

      // Remember to null out your .fx and .fy so that d3 can begin simulating the dragged point once more
      d.fx = null;
      d.fy = null;

    }





    // Handle the buttons provided in the HTML the same way as we did before
    d3.select("#play").on("click", () => {
      // Start animating the simulation
      sim.restart(); // clears the "alpha" value and starts fresh

    });
    d3.select("#stop").on("click", () => {
      // Pause the simulation animation
        sim.stop(); // pauses sim

    });
    d3.select("#tick").on("click", () => {
      // Move the simulation one "tick"
        sim.tick(); // moves one frame forward, but doesn't trigger tick event
        render(); // manually update circles

    });




    // Try some more datasets taken from the scientific network repository (http://networkrepository.com/)
    // I just did some simple post-processing to convert their sparse matrices to JSON objects that d3.forceSimulation can use
    const karate = await d3.json("../datasets/soc-karate.json");
    const wiki = await d3.json("../datasets/soc-wiki-Vote.json");
    const enron = await d3.json("../datasets/ia-enron-only.json");

    let dataset = karate; // swap datasets here

    // Copied code, no need to edit (except for strengths in sim2)
    dataset.nodes.forEach( node => {
      node.x = width/2.0 + d3.randomUniform(-300,300)();
      node.y = height/2.0 + d3.randomUniform(-300,300)();
    });
    console.log(dataset)

    var sim2 = d3.forceSimulation()
                .nodes(dataset.nodes)
                .force("links", d3.forceLink().links(dataset.edges).id( d => d.id ) )
                .force("repulse", d3.forceManyBody().strength(-30) )
                .force("center", d3.forceCenter(width/2.0, height/2.0))
                .on("tick", render2);

    function render2() {

      // Edges
      let lines2 = layer2.selectAll("line.link").data(dataset.edges)
      lines2.enter().append("line").attr("class","link")
           .attr("stroke","#333")
           .merge(lines2)
           .attr("x1", d => d.source.x).attr("x2", d => d.target.x)   // Using the pointers d3.forceLink provides to access node x and y coords
           .attr("y1", d => d.source.y).attr("y2", d => d.target.y);

      // Nodes
      let circles2 = layer2.selectAll("circle.node").data(dataset.nodes); // (returns nothing the first time render is called, then returns all circles)
      circles2.enter() // get a list of new circles to add (full the first time we call render, empty from then on)
             .append("circle")
             .attr("class","node")
             .attr("fill", d => colorScale(d.prefix))  // NOTE: These datasets have no d.prefix, so colorScale(undefined) is called. It still gives us a green color to use!
             .attr("stroke", "#333")
             .attr("r", 6)
             .attr("cx", 0)
             .attr("cy", 0)
             .merge(circles2) // brings circles that were found by layer.selectAll back in so that we can edit BOTH the new stuff AND existing stuff
             .attr("transform", d => "translate("+d.x+","+d.y+")");

    }




  };

  requestData();



  </script>








  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>


  </div>
</body>
</html>
